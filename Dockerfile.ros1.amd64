# Built with arch: amd64 flavor: lxde image: ubuntu:20.04
#
################################################################################
# base system
################################################################################

FROM ubuntu:20.04 as system



RUN sed -i 's#http://archive.ubuntu.com/ubuntu/#mirror://mirrors.ubuntu.com/mirrors.txt#' /etc/apt/sources.list;


# built-in packages
ENV DEBIAN_FRONTEND noninteractive
RUN apt update \
    && apt install -y --no-install-recommends software-properties-common curl apache2-utils \
    && apt update \
    && apt install -y --no-install-recommends --allow-unauthenticated \
        supervisor nginx sudo net-tools zenity xz-utils \
        dbus-x11 x11-utils alsa-utils \
        mesa-utils libgl1-mesa-dri \
    && apt autoclean -y \
    && apt autoremove -y \
    && rm -rf /var/lib/apt/lists/*
# install debs error if combine together
RUN apt update \
    && apt install -y --no-install-recommends --allow-unauthenticated \
        xvfb x11vnc novnc\
        vim-tiny firefox ttf-ubuntu-font-family ttf-wqy-zenhei  \
    && apt autoclean -y \
    && apt autoremove -y \
    && rm -rf /var/lib/apt/lists/*

RUN apt update \
    && apt install -y gpg-agent \
    && curl -LO https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \
    && (dpkg -i ./google-chrome-stable_current_amd64.deb || apt-get install -fy) \
    && curl -sSL https://dl.google.com/linux/linux_signing_key.pub | apt-key add \
    && rm google-chrome-stable_current_amd64.deb \
    && rm -rf /var/lib/apt/lists/*

RUN apt update \
    && apt install -y --no-install-recommends --allow-unauthenticated \
        lxde gtk2-engines-murrine gnome-themes-standard gtk2-engines-pixbuf gtk2-engines-murrine arc-theme \
    && apt autoclean -y \
    && apt autoremove -y \
    && rm -rf /var/lib/apt/lists/*


# Additional packages require ~600MB
# libreoffice  pinta language-pack-zh-hant language-pack-gnome-zh-hant firefox-locale-zh-hant libreoffice-l10n-zh-tw

# tini to fix subreap
ARG TINI_VERSION=v0.18.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /bin/tini
RUN chmod +x /bin/tini

# ffmpeg
RUN apt update \
    && apt install -y --no-install-recommends --allow-unauthenticated \
        ffmpeg \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir /usr/local/ffmpeg \
    && ln -s /usr/bin/ffmpeg /usr/local/ffmpeg/ffmpeg

# python library
COPY rootfs/usr/local/lib/web/backend/requirements.txt /tmp/
RUN apt-get update \
    && dpkg-query -W -f='${Package}\n' > /tmp/a.txt \
    && apt-get install -y python3-pip python3-dev build-essential \
	&& pip3 install setuptools wheel && pip3 install -r /tmp/requirements.txt \
    && ln -s /usr/bin/python3 /usr/local/bin/python \
    && dpkg-query -W -f='${Package}\n' > /tmp/b.txt \
    && apt-get remove -y `diff --changed-group-format='%>' --unchanged-group-format='' /tmp/a.txt /tmp/b.txt | xargs` \
    && apt-get autoclean -y \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/* /tmp/a.txt /tmp/b.txt


### ROS
# install packages
RUN apt-get update && apt-get install -q -y --no-install-recommends \
    wget \
    lsb-release \
    curl \
    dirmngr \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/*

# setup sources.list
RUN echo "deb http://packages.ros.org/ros/ubuntu focal main" > /etc/apt/sources.list.d/ros1-latest.list

# setup keys
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

ENV ROS_DISTRO noetic

# Add ROS 1 repository
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -
RUN echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -cs` main" > /etc/apt/sources.list.d/ros-latest.list

# Install ROS 1
RUN apt-get update && apt-get install -y \
    ros-noetic-desktop-full

# Install required TurtleBot3 packages and Gazebo
RUN apt-get update && apt-get install -y \
    git \
    ros-noetic-gazebo-ros-pkgs \
    ros-noetic-turtlebot3-msgs \
    ros-noetic-turtlebot3 \
    && rm -rf /var/lib/apt/lists/*

# Set up workspace
RUN mkdir -p ~/catkin_ws/src

# Change working directory
#WORKDIR ~/catkin_ws

# Clone turtlebot3_simulations into the src directory
#RUN git clone -b noetic-devel https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git src/turtlebot3_simulations

WORKDIR /root/catkin_ws/src
RUN git clone -b noetic-devel https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git
RUN ls -la

# Source gazebo setup before building the workspace
RUN echo "source /usr/share/gazebo/setup.sh" >> ~/.bashrc


# Build the workspace
WORKDIR /root/catkin_ws

RUN /bin/bash -c ". /opt/ros/noetic/setup.bash; catkin_make"

RUN ls -la ~/catkin_ws/src

# Set Turtlebot model to burger by default (change this to 'burger' or 'waffle_pi' as needed)
ENV TURTLEBOT3_MODEL burger

# Source setup script
RUN echo "source ~/catkin_ws/devel/setup.bash" >> ~/.bashrc

# Sublime
RUN curl -fsSL https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - 
RUN add-apt-repository "deb https://download.sublimetext.com/ apt/stable/" 
RUN apt install sublime-text

# Additional ROS Packages and tools for course
RUN apt-get install -y ros-noetic-vision-msgs

# pip3
RUN apt-get install -y python3-pip

RUN pip install ultralytics

# setup entrypoint
#COPY ./ros_entrypoint.sh /

#RUN chmod +x /ros_entrypoint.sh

#ENTRYPOINT ["/ros_entrypoint.sh"]
#CMD ["bash"]




################################################################################
# builder
################################################################################
FROM ubuntu:20.04 as builder


RUN sed -i 's#http://archive.ubuntu.com/ubuntu/#mirror://mirrors.ubuntu.com/mirrors.txt#' /etc/apt/sources.list;


RUN apt-get update \
    && apt-get install -y --no-install-recommends curl ca-certificates gnupg patch

# nodejs
#RUN curl -sL https://deb.nodesource.com/setup_12.x | bash - \
#    && apt-get install -y nodejs

# yarn
#RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \
#    && echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list \
#    && apt-get update \
#    && apt-get install -y yarn

# build frontend
#COPY web /src/web
#RUN cd /src/web \
#    && yarn \
#    && yarn build
#RUN sed -i 's#app/locale/#novnc/app/locale/#' /src/web/dist/static/novnc/app/ui.js



################################################################################
# merge
################################################################################
FROM system
#LABEL maintainer="fcwu.tw@gmail.com"

#COPY --from=builder /src/web/dist/ /usr/local/lib/web/frontend/
COPY rootfs /
#RUN ln -sf /usr/local/lib/web/frontend/static/websockify /usr/local/lib/web/frontend/static/novnc/utils/websockify && \
#	chmod +x /usr/local/lib/web/frontend/static/websockify/run

EXPOSE 8080
EXPOSE 5900
WORKDIR /root
ENV HOME=/home/ubuntu \
    SHELL=/bin/bash
HEALTHCHECK --interval=30s --timeout=5s CMD curl --fail http://127.0.0.1:6079/api/health
ENTRYPOINT ["/startup.sh"]
